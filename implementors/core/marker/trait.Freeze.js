(function() {var implementors = {};
implementors["plat_egg"] = [{"text":"impl&lt;'a, L, P&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Dot.html\" title=\"struct plat_egg::Dot\">Dot</a>&lt;'a, L, P&gt;","synthetic":true,"types":["plat_egg::dot::Dot"]},{"text":"impl&lt;L, D&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.EClassData.html\" title=\"struct plat_egg::EClassData\">EClassData</a>&lt;L, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::eclass::EClassData"]},{"text":"impl&lt;L, N&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.EGraph.html\" title=\"struct plat_egg::EGraph\">EGraph</a>&lt;L, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::egraph::EGraph"]},{"text":"impl Freeze for <a class=\"enum\" href=\"plat_egg/enum.Justification.html\" title=\"enum plat_egg::Justification\">Justification</a>","synthetic":true,"types":["plat_egg::explain::Justification"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Explanation.html\" title=\"struct plat_egg::Explanation\">Explanation</a>&lt;L&gt;","synthetic":true,"types":["plat_egg::explain::Explanation"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.TreeTerm.html\" title=\"struct plat_egg::TreeTerm\">TreeTerm</a>&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::explain::TreeTerm"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.FlatTerm.html\" title=\"struct plat_egg::FlatTerm\">FlatTerm</a>&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::explain::FlatTerm"]},{"text":"impl&lt;'a, CF, L, N&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Extractor.html\" title=\"struct plat_egg::Extractor\">Extractor</a>&lt;'a, CF, L, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CF: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::extract::Extractor"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.AstSize.html\" title=\"struct plat_egg::AstSize\">AstSize</a>","synthetic":true,"types":["plat_egg::extract::AstSize"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.AstDepth.html\" title=\"struct plat_egg::AstDepth\">AstDepth</a>","synthetic":true,"types":["plat_egg::extract::AstDepth"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.FromOpError.html\" title=\"struct plat_egg::FromOpError\">FromOpError</a>","synthetic":true,"types":["plat_egg::language::FromOpError"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"enum\" href=\"plat_egg/enum.RecExprParseError.html\" title=\"enum plat_egg::RecExprParseError\">RecExprParseError</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::language::RecExprParseError"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.DidMerge.html\" title=\"struct plat_egg::DidMerge\">DidMerge</a>","synthetic":true,"types":["plat_egg::language::DidMerge"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.SymbolLang.html\" title=\"struct plat_egg::SymbolLang\">SymbolLang</a>","synthetic":true,"types":["plat_egg::language::SymbolLang"]},{"text":"impl&lt;'a, L, N&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.LpExtractor.html\" title=\"struct plat_egg::LpExtractor\">LpExtractor</a>&lt;'a, L, N&gt;","synthetic":true,"types":["plat_egg::lp_extract::LpExtractor"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.MultiPattern.html\" title=\"struct plat_egg::MultiPattern\">MultiPattern</a>&lt;L&gt;","synthetic":true,"types":["plat_egg::multipattern::MultiPattern"]},{"text":"impl&lt;E&gt; Freeze for <a class=\"enum\" href=\"plat_egg/enum.MultiPatternParseError.html\" title=\"enum plat_egg::MultiPatternParseError\">MultiPatternParseError</a>&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::multipattern::MultiPatternParseError"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Pattern.html\" title=\"struct plat_egg::Pattern\">Pattern</a>&lt;L&gt;","synthetic":true,"types":["plat_egg::pattern::Pattern"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"enum\" href=\"plat_egg/enum.ENodeOrVar.html\" title=\"enum plat_egg::ENodeOrVar\">ENodeOrVar</a>&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::pattern::ENodeOrVar"]},{"text":"impl&lt;'a, L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.SearchMatches.html\" title=\"struct plat_egg::SearchMatches\">SearchMatches</a>&lt;'a, L&gt;","synthetic":true,"types":["plat_egg::pattern::SearchMatches"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/struct.RawEClass.html\" title=\"struct plat_egg::raw::RawEClass\">RawEClass</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::raw::eclass::RawEClass"]},{"text":"impl&lt;L, P&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/struct.EGraphResidual.html\" title=\"struct plat_egg::raw::EGraphResidual\">EGraphResidual</a>&lt;L, P&gt;","synthetic":true,"types":["plat_egg::raw::egraph::EGraphResidual"]},{"text":"impl&lt;L, D, U&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/struct.RawEGraph.html\" title=\"struct plat_egg::raw::RawEGraph\">RawEGraph</a>&lt;L, D, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::raw::egraph::RawEGraph"]},{"text":"impl&lt;D&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/struct.UnionInfo.html\" title=\"struct plat_egg::raw::UnionInfo\">UnionInfo</a>&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::raw::egraph::UnionInfo"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/raw/semi_persistent1/struct.PushInfo.html\" title=\"struct plat_egg::raw::semi_persistent1::PushInfo\">PushInfo</a>","synthetic":true,"types":["plat_egg::raw::semi_persistent1::PushInfo"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/raw/semi_persistent1/struct.UndoLog.html\" title=\"struct plat_egg::raw::semi_persistent1::UndoLog\">UndoLog</a>","synthetic":true,"types":["plat_egg::raw::semi_persistent1::UndoLog"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/struct.RecExpr.html\" title=\"struct plat_egg::raw::RecExpr\">RecExpr</a>&lt;L&gt;","synthetic":true,"types":["plat_egg::raw::language::RecExpr"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/raw/semi_persistent2/struct.PushInfo.html\" title=\"struct plat_egg::raw::semi_persistent2::PushInfo\">PushInfo</a>","synthetic":true,"types":["plat_egg::raw::semi_persistent2::PushInfo"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/raw/semi_persistent2/struct.UndoLog.html\" title=\"struct plat_egg::raw::semi_persistent2::UndoLog\">UndoLog</a>","synthetic":true,"types":["plat_egg::raw::semi_persistent2::UndoLog"]},{"text":"impl&lt;'a, L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/semi_persistent2/struct.UndoCtx.html\" title=\"struct plat_egg::raw::semi_persistent2::UndoCtx\">UndoCtx</a>&lt;'a, L&gt;","synthetic":true,"types":["plat_egg::raw::semi_persistent2::UndoCtx"]},{"text":"impl&lt;P&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/struct.UnionFind.html\" title=\"struct plat_egg::raw::UnionFind\">UnionFind</a>&lt;P&gt;","synthetic":true,"types":["plat_egg::raw::unionfind::UnionFind"]},{"text":"impl&lt;const B:&nbsp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.63.0/std/primitive.bool.html\">bool</a>&gt; Freeze for <a class=\"struct\" href=\"plat_egg/raw/reflect_const/struct.PathCompress.html\" title=\"struct plat_egg::raw::reflect_const::PathCompress\">PathCompress</a>&lt;B&gt;","synthetic":true,"types":["plat_egg::raw::reflect_const::PathCompress"]},{"text":"impl&lt;L, N&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Rewrite.html\" title=\"struct plat_egg::Rewrite\">Rewrite</a>&lt;L, N&gt;","synthetic":true,"types":["plat_egg::rewrite::Rewrite"]},{"text":"impl&lt;C, A&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.ConditionalApplier.html\" title=\"struct plat_egg::ConditionalApplier\">ConditionalApplier</a>&lt;C, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::rewrite::ConditionalApplier"]},{"text":"impl&lt;L&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.ConditionEqual.html\" title=\"struct plat_egg::ConditionEqual\">ConditionEqual</a>&lt;L&gt;","synthetic":true,"types":["plat_egg::rewrite::ConditionEqual"]},{"text":"impl&lt;L, N, IterData&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Runner.html\" title=\"struct plat_egg::Runner\">Runner</a>&lt;L, N, IterData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::run::Runner"]},{"text":"impl Freeze for <a class=\"enum\" href=\"plat_egg/enum.StopReason.html\" title=\"enum plat_egg::StopReason\">StopReason</a>","synthetic":true,"types":["plat_egg::run::StopReason"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.Report.html\" title=\"struct plat_egg::Report\">Report</a>","synthetic":true,"types":["plat_egg::run::Report"]},{"text":"impl&lt;IterData&gt; Freeze for <a class=\"struct\" href=\"plat_egg/struct.Iteration.html\" title=\"struct plat_egg::Iteration\">Iteration</a>&lt;IterData&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IterData: Freeze,&nbsp;</span>","synthetic":true,"types":["plat_egg::run::Iteration"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.SimpleScheduler.html\" title=\"struct plat_egg::SimpleScheduler\">SimpleScheduler</a>","synthetic":true,"types":["plat_egg::run::SimpleScheduler"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.BackoffScheduler.html\" title=\"struct plat_egg::BackoffScheduler\">BackoffScheduler</a>","synthetic":true,"types":["plat_egg::run::BackoffScheduler"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.Var.html\" title=\"struct plat_egg::Var\">Var</a>","synthetic":true,"types":["plat_egg::subst::Var"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.Subst.html\" title=\"struct plat_egg::Subst\">Subst</a>","synthetic":true,"types":["plat_egg::subst::Subst"]},{"text":"impl Freeze for <a class=\"struct\" href=\"plat_egg/struct.Id.html\" title=\"struct plat_egg::Id\">Id</a>","synthetic":true,"types":["plat_egg::Id"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()